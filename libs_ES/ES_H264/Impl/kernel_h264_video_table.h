#ifndef _KERNEL_H264_VIDEO_TABLE_H_
#define _KERNEL_H264_VIDEO_TABLE_H_

#include "IntTypes.h"

typedef enum
{
	Intra_4x4	= 0,
	Intra_8x8,
	Intra_16x16,
} INTRA_BLOCK_TYPE_e;

typedef enum
{
	Direct		= 0,
	Pred_L0,
	Pred_L1,
	BiPred,
} PRED_TYPE_e;

const static S32 LUT_ICBP_luma[26] =
{
	-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, -1
};

const static S32 LUT_ICBP_chroma[26] =
{
	-1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, -1
};

const static S32 LUT_MbPartPredMode[10][2][26] =		//slice : index : mb_type
{
	{
		{Pred_L0, Pred_L0, Pred_L0, -1, -1, Pred_L0,},		//0
		{-1, Pred_L0, Pred_L0, -1, -1, -1,}					//1
	},					//SLICE: P
	{
		{
			Direct, Pred_L0, Pred_L1, BiPred,
			Pred_L0, Pred_L0, Pred_L1, Pred_L1, 
			Pred_L0, Pred_L0, Pred_L1, Pred_L1,
			Pred_L0, Pred_L0, Pred_L1, Pred_L1,
			BiPred, BiPred, BiPred, BiPred, BiPred, BiPred,
			-1, Direct,
		},	//0
		{
			-1, -1, -1, -1,
			Pred_L0, Pred_L0, Pred_L1, Pred_L1, 
			Pred_L1, Pred_L1, Pred_L0, Pred_L0,
			BiPred, BiPred, BiPred, BiPred, 
			Pred_L0, Pred_L0, Pred_L1, Pred_L1, 
			BiPred, BiPred,
			-1, -1,
		}	//1
	},					//SLICE: B
	{
		{
			Intra_4x4, Intra_16x16, Intra_16x16, Intra_16x16, Intra_16x16, Intra_16x16, Intra_16x16,
			 Intra_16x16, Intra_16x16, Intra_16x16, Intra_16x16, Intra_16x16, Intra_16x16, Intra_16x16,
			  Intra_16x16, Intra_16x16, Intra_16x16, Intra_16x16, Intra_16x16, Intra_16x16, Intra_16x16,
			   Intra_16x16, Intra_16x16, Intra_16x16, Intra_16x16, -1 
		},	//0				  
		{
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
		}	//1 
	},					//SLICE: I
	{
		{Pred_L0, Pred_L0, Pred_L0, -1, -1, Pred_L0,},
		{-1, Pred_L0, Pred_L0, -1, -1, -1,}
	},					//SLICE: SP
	{
		{Intra_4x4,},
		{-1,}
	},					//SLICE: SI
	{
		{Pred_L0, Pred_L0, Pred_L0, -1, -1, Pred_L0,},
		{-1, Pred_L0, Pred_L0, -1, -1, -1,}
	},					//SLICE: P
	{
		{
			Direct, Pred_L0, Pred_L1, BiPred,
			Pred_L0, Pred_L0, Pred_L1, Pred_L1, 
			Pred_L0, Pred_L0, Pred_L1, Pred_L1,
			Pred_L0, Pred_L0, Pred_L1, Pred_L1,
			BiPred, BiPred, BiPred, BiPred, BiPred, BiPred,
			-1, Direct,
		},	//0
		{
			-1, -1, -1, -1,
			Pred_L0, Pred_L0, Pred_L1, Pred_L1, 
			Pred_L1, Pred_L1, Pred_L0, Pred_L0,
			BiPred, BiPred, BiPred, BiPred, 
			Pred_L0, Pred_L0, Pred_L1, Pred_L1, 
			BiPred, BiPred,
			-1, -1,
		}	//1
	},					//SLICE: B
	{
		{
			Intra_4x4, Intra_16x16, Intra_16x16, Intra_16x16, Intra_16x16, Intra_16x16, Intra_16x16,
			 Intra_16x16, Intra_16x16, Intra_16x16, Intra_16x16, Intra_16x16, Intra_16x16, Intra_16x16,
			  Intra_16x16, Intra_16x16, Intra_16x16, Intra_16x16, Intra_16x16, Intra_16x16, Intra_16x16,
			   Intra_16x16, Intra_16x16, Intra_16x16, Intra_16x16, -1 
		},	//0				  
		{
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
		}, //1 
	},					//SLICE: I
	{
		{Pred_L0, Pred_L0, Pred_L0, -1, -1, Pred_L0,},
		{-1, Pred_L0, Pred_L0, -1, -1, -1,}
	},					//SLICE: SP
	{
		{Intra_4x4,},
		{-1,}
	},					//SLICE: SI
};

const static S8 LUT_NumMbPart[10][26] =		//slice : index : mb_type
{
	{
		1, 2, 2, 4, 4, 1,
	},		//SLICE: P
	{
		-1, 1, 1, 1, 
		2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
		4, -1,
	},		//SLICE: B
	{
		-1,
	},		//SLICE: I
	{
		1, 2, 2, 4, 4, 1,
	},		//SLICE: SP
	{
		-1,
	},		//SLICE: SI
	{
		1, 2, 2, 4, 4, 1,
	},		//SLICE: P
	{
		-1, 1, 1, 1, 
		2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
		4, -1,
	},		//SLICE: B
	{
		-1,
	},		//SLICE: I
	{
		1, 2, 2, 4, 4, 1,
	},		//SLICE: SP
	{
		-1,
	},		//SLICE: SI
};

const static S32 LUT_CBP[2][48] =
{
	{
		47, 31, 15,  0, 23, 27, 29, 30,
		 7, 11, 13, 14, 39, 43, 45, 46,
		16,  3,  5, 10, 12, 19, 21, 26,
		28, 35, 37, 42, 44,  1,  2,  4,
		 8, 17, 18, 20, 24,  6,  9, 22,
		25, 32, 33, 34, 36, 40, 38, 41
	},
	{
		 0, 16,  1,  2,  4,  8, 32,  3,
		 5, 10, 12, 15, 47,  7, 11, 13,
		14,  6,  9, 31, 35, 37, 42, 44,
		33, 34, 36, 40, 39, 43, 45, 46,
		17, 18, 20, 24, 19, 21, 26, 28,
		23, 27, 29, 30, 22, 25, 38, 41
	}
};

//ported from JM9.0 vlc.c
const static S32 NUMVLC_lentab[6][4][17] = 
{
	{   
		{ 1, 6, 8, 9,10,11,13,13,13,14,14,15,15,16,16,16,16},
		{ 0, 2, 6, 8, 9,10,11,13,13,14,14,15,15,15,16,16,16},
		{ 0, 0, 3, 7, 8, 9,10,11,13,13,14,14,15,15,16,16,16},
		{ 0, 0, 0, 5, 6, 7, 8, 9,10,11,13,14,14,15,15,16,16}
	},                                                 
	{                                                  
		{ 2, 6, 6, 7, 8, 8, 9,11,11,12,12,12,13,13,13,14,14},
		{ 0, 2, 5, 6, 6, 7, 8, 9,11,11,12,12,13,13,14,14,14},
		{ 0, 0, 3, 6, 6, 7, 8, 9,11,11,12,12,13,13,13,14,14},
		{ 0, 0, 0, 4, 4, 5, 6, 6, 7, 9,11,11,12,13,13,13,14}
		},                                                 
	{                                                  
		{ 4, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9, 9, 9,10,10,10,10},
		{ 0, 4, 5, 5, 5, 5, 6, 6, 7, 8, 8, 9, 9, 9,10,10,10},
		{ 0, 0, 4, 5, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9,10,10,10},
		{ 0, 0, 0, 4, 4, 4, 4, 4, 5, 6, 7, 8, 8, 9,10,10,10}
	},
	{
		{ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		{ 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}, 
		{ 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}, 
		{ 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}
	},
	//YUV420
	{
		{ 2, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{ 0, 1, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
		{ 0, 0, 3, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
		{ 0, 0, 0, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
	},
	//YUV422
	{
		{ 1, 7, 7, 9, 9,10,11,12,13, 0, 0, 0, 0, 0, 0, 0, 0},
		{ 0, 2, 7, 7, 9,10,11,12,12, 0, 0, 0, 0, 0, 0, 0, 0}, 
		{ 0, 0, 3, 7, 7, 9,10,11,12, 0, 0, 0, 0, 0, 0, 0, 0}, 
		{ 0, 0, 0, 5, 6, 7, 7,10,11, 0, 0, 0, 0, 0, 0, 0, 0}
	},
};

const static S32 NUMVLC_codtab[6][4][17] = 
{
	{
		{ 1, 5, 7, 7, 7, 7,15,11, 8,15,11,15,11,15,11, 7,4}, 
		{ 0, 1, 4, 6, 6, 6, 6,14,10,14,10,14,10, 1,14,10,6}, 
		{ 0, 0, 1, 5, 5, 5, 5, 5,13, 9,13, 9,13, 9,13, 9,5}, 
		{ 0, 0, 0, 3, 3, 4, 4, 4, 4, 4,12,12, 8,12, 8,12,8}
	},
	{
		{ 3,11, 7, 7, 7, 4, 7,15,11,15,11, 8,15,11, 7, 9,7}, 
		{ 0, 2, 7,10, 6, 6, 6, 6,14,10,14,10,14,10,11, 8,6}, 
		{ 0, 0, 3, 9, 5, 5, 5, 5,13, 9,13, 9,13, 9, 6,10,5}, 
		{ 0, 0, 0, 5, 4, 6, 8, 4, 4, 4,12, 8,12,12, 8, 1,4}
	},
	{
		{15,15,11, 8,15,11, 9, 8,15,11,15,11, 8,13, 9, 5,1}, 
		{ 0,14,15,12,10, 8,14,10,14,14,10,14,10, 7,12, 8,4},
		{ 0, 0,13,14,11, 9,13, 9,13,10,13, 9,13, 9,11, 7,3},
		{ 0, 0, 0,12,11,10, 9, 8,13,12,12,12, 8,12,10, 6,2}
	},
	{
		{ 3, 0, 4, 8,  12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60},
		{ 0, 1, 5, 9,  13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61},
		{ 0, 0, 6, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62},
		{ 0, 0, 0, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51, 55, 59, 63}
	},
	//YUV420
	{
		{ 1, 7, 4, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{ 0, 1, 6, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{ 0, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{ 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
	},
	//YUV422
	{
		{ 1,15,14, 7, 6, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0},
		{ 0, 1,13,12, 5, 6, 6, 6, 5, 0, 0, 0, 0, 0, 0, 0, 0},
		{ 0, 0, 1,11,10, 4, 5, 5, 4, 0, 0, 0, 0, 0, 0, 0, 0},
		{ 0, 0, 0, 1, 1, 9, 8, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0}
	},
};

const static S32 NVMVLC_nC_table[17] =
{
	0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3
};

const static S32 TOTALZEROS_lentab[3][15][16] = 
{
	{
		{1, 2, 3, 3},
		{1, 2, 2},
		{1, 1},
	},
	{
		{ 1,3,3,4,4,4,5,5},
		{ 3,2,3,3,3,3,3},
		{ 3,3,2,2,3,3},
		{ 3,2,2,2,3},
		{ 2,2,2,2},
		{ 2,2,1},   
		{ 1,1},
	},
	{
		{ 1,3,3,4,4,5,5,6,6,7,7,8,8,9,9,9},  
		{ 3,3,3,3,3,4,4,4,4,5,5,6,6,6,6},  
		{ 4,3,3,3,4,4,3,3,4,5,5,6,5,6},  
		{ 5,3,4,4,3,3,3,4,3,4,5,5,5},  
		{ 4,4,4,3,3,3,3,3,4,5,4,5},  
		{ 6,5,3,3,3,3,3,3,4,3,6},  
		{ 6,5,3,3,3,2,3,4,3,6},  
		{ 6,4,5,3,2,2,3,3,6},  
		{ 6,6,4,2,2,3,2,5},  
		{ 5,5,3,2,2,2,4},  
		{ 4,4,3,3,1,3},  
		{ 4,4,2,1,3},  
		{ 3,3,1,2},  
		{ 2,2,1},  
		{ 1,1},  
	}
};

const static S32 TOTALZEROS_codtab[3][15][16] = 
{
	{
		{ 1,1,1,0},
		{ 1,1,0},
		{ 1,0}
	},
	{
		{ 1,2,3,2,3,1,1,0},
		{ 0,1,1,4,5,6,7},
		{ 0,1,1,2,6,7},
		{ 6,0,1,2,7},
		{ 0,1,2,3},
		{ 0,1,1},   
		{ 0,1}
	},
	{
		{1,3,2,3,2,3,2,3,2,3,2,3,2,3,2,1},
		{7,6,5,4,3,5,4,3,2,3,2,3,2,1,0},
		{5,7,6,5,4,3,4,3,2,3,2,1,1,0},
		{3,7,5,4,6,5,4,3,3,2,2,1,0},
		{5,4,3,7,6,5,4,3,2,1,1,0},
		{1,1,7,6,5,4,3,2,1,1,0},
		{1,1,5,4,3,3,2,1,1,0},
		{1,1,1,3,3,2,2,1,0},
		{1,0,1,3,2,1,1,1,},
		{1,0,1,3,2,1,1,},
		{0,1,1,2,1,3},
		{0,1,1,1,1},
		{0,1,1,1},
		{0,1,1},
		{0,1},  
	}
};

const static S32 RUNBEFORE_lentab[7][15] = 
{
	{1,1},
	{1,2,2},
	{2,2,2,2},
	{2,2,2,3,3},
	{2,2,3,3,3,3},
	{2,3,3,3,3,3,3},
	{3,3,3,3,3,3,3,4,5,6,7,8,9,10,11},
};

const static S32 RUNBEFORE_codtab[7][15] = 
{
	{1,0},
	{1,1,0},
	{3,2,1,0},
	{3,2,1,1,0},
	{3,2,3,2,1,0},
	{3,0,1,3,2,5,4},
	{7,6,5,4,3,2,1,1,1,1,1,1,1,1,1},
};

const static S32 H264_LUT_chromaindex[4] =
{
	0, 0, 1, 2
};

const static S32 NEIGHBOUR_leftA[3][48] =
{
	{
		-43, 0, -41, 2, 1, 4, 3, 6, -35, 8, -33, 10, 9, 12, 11, 14,			//luma
		-31, 16, -29, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,				//chroma Cb 
		-15, 32, -13, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,				//chroma Cr
	},		//4 : 2 : 0
};

const static S32 NEIGHBOUR_upperB[3][48] =
{
	{
		-38, -37, 0, 1, -34, -33, 4, 5, 2, 3, 8, 9, 6, 7, 12, 13, 
		-30, -29, 16, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,				//chroma Cb 
		-14, -13, 32, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,				//chroma Cr
	},			//4 : 2 : 0
};

const static S32 H264_LUT_cc[12] = {0, 0, 0, 0, 1, 2, 1, 2, 1, 2, 1, 2};

static S8 ZZ_SCAN[16] =
{  
	0,  1,  4,  8,  5,  2,  3,  6,  9, 12, 13, 10,  7, 11, 14, 15
};

static S8 ZZ_SCAN8[64] =
{  
	0,  1,  8, 16,  9,  2,  3, 10, 17, 24, 32, 25, 18, 11,  4,  5,
   12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13,  6,  7, 14, 21, 28,
   35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51,
   58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63
};

const static S32 H264_4x4_SCAN[2][4][4] =
{
	{
		{0,  1,  5,  6},
		{2,  4,  7, 12},
		{3,  8, 11, 13},
		{9, 10, 14, 15}
	},
	{
		{0,  2,  8, 12},
		{1,  5,  9, 13},
		{3,  6, 10, 14},
		{4,  7, 11, 15}
	}
};

const static S32 H264_LUT_4x4_XOFFSET[16] =
{
	0, 4, 0, 4, 8, 12, 8, 12, 0, 4, 0, 4, 8, 12, 8, 12
};

const static S32 H264_LUT_4x4_YOFFSET[16] =
{
	0, 0, 4, 4, 0, 0, 4, 4, 8, 8, 12, 12, 8, 8, 12, 12
};

const static S32 H264_LUT_v[6][3] =
{
	10, 16, 13,
	11, 18, 14,
	13, 20, 16,
	14, 23, 18,
	16, 25, 20,
	18, 29, 23,
};

const static S32 H264_Default_4x4_Intra[16] =
{
	6, 13, 13, 20, 20, 20, 28, 28, 28, 28, 32, 32, 32, 37, 37, 42
};

const static S32 H264_Default_4x4_Inter[16] =
{
	10, 14, 14, 20, 20, 20, 24, 24, 24, 24, 27, 27, 27, 30, 30, 34
};

#define H264_Clip1Y(x)		H264_Clip3(0, (1 << pCurSPS->BitDepthY) - 1, (x))
#define H264_Clip1C(x)		H264_Clip3(0, (1 << pCurSPS->BitDepthC) - 1, (x))

_inline S32 H264_Clip3(S32 x, S32 y, S32 z)
{
	S32 rtcode = 0;

	if (z < x)
	{
		rtcode = x;
	}
	else if (z > y)
	{
		rtcode = y;
	}
	else
	{
		rtcode = z;
	}

	return rtcode;
}

#endif	//_KERNEL_H264_VIDEO_TABLE_H_
